#!/usr/bin/env node

/**
 * Script para probar el orquestador directamente sin servidor web
 * Ejecutar: node test-orchestrator-direct.js
 */

import { Orchestrator } from './src/orchestrator/index';
import { minioStorage } from './src/modules/minio/index';

async function testOrchestratorDirect() {
  console.log('üîç PROBANDO ORQUESTADOR DIRECTAMENTE\n');

  try {
    // 1. Verificar MinIO
    console.log('1Ô∏è‚É£ Verificando MinIO...');
    const minioStatus = await minioStorage.getStatus();
    console.log('   Estado MinIO:', minioStatus.available ? '‚úÖ Disponible' : '‚ùå No disponible');
    
    if (!minioStatus.available) {
      console.log('   ‚ö†Ô∏è  MinIO no est√° disponible, continuando con prueba...');
    }

    // 2. Crear orquestador
    console.log('\n2Ô∏è‚É£ Creando orquestador...');
    const orchestrator = await Orchestrator.create();
    console.log('   ‚úÖ Orquestador creado exitosamente');

    // 3. Probar scraping con los 3 m√≥dulos
    console.log('\n3Ô∏è‚É£ Ejecutando scraping con los 3 m√≥dulos...');
    const testUrl = 'https://www.farfetch.com/shopping/men/shoes-2/items.aspx';
    
    console.log(`   üéØ URL de prueba: ${testUrl}`);
    console.log('   ‚è±Ô∏è  Iniciando scraping...');
    
    const startTime = Date.now();
    
    const results = await orchestrator.scrapeWithSession({
      scrapeUrl: testUrl,
      maxRetries: 1
    });
    
    const endTime = Date.now();
    const duration = (endTime - startTime) / 1000;
    
    console.log(`   ‚è±Ô∏è  Tiempo total: ${duration}s`);
    console.log(`   üìä Resultados: ${results.length} ofertas encontradas`);

    // 4. Mostrar muestra de datos
    if (results.length > 0) {
      console.log('\n4Ô∏è‚É£ Muestra de datos extra√≠dos:');
      results.slice(0, 3).forEach((offer, index) => {
        console.log(`\n   Oferta ${index + 1}:`);
        console.log(`   - ID: ${offer.id}`);
        console.log(`   - T√≠tulo: ${offer.title}`);
        console.log(`   - Precio: $${offer.price}`);
        console.log(`   - Marca: ${offer.brand}`);
        console.log(`   - Categor√≠a: ${offer.category}`);
        console.log(`   - Estado: ${offer.availability}`);
        console.log(`   - Imagen: ${offer.imageUrl ? 'S√≠' : 'No'}`);
        console.log(`   - URL: ${offer.url}`);
        console.log(`   - Timestamp: ${offer.timestamp}`);
      });
    } else {
      console.log('\n4Ô∏è‚É£ ‚ö†Ô∏è  No se encontraron ofertas');
    }

    // 5. Verificar datos en MinIO (si est√° disponible)
    if (minioStatus.available) {
      console.log('\n5Ô∏è‚É£ Verificando datos guardados en MinIO...');
      
      try {
        // Esperar un momento para que se guarden los datos
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const scrapingData = await minioStorage.loadScrapingData(testUrl, 5);
        console.log(`   üì¶ Registros en MinIO: ${scrapingData.length}`);
        
        if (scrapingData.length > 0) {
          console.log('\n   üìã Datos por fuente:');
          const bySource = {};
          scrapingData.forEach(data => {
            const source = data.data?.source || 'unknown';
            bySource[source] = (bySource[source] || 0) + 1;
          });
          
          Object.entries(bySource).forEach(([source, count]) => {
            console.log(`   - ${source}: ${count} registros`);
          });
        }
      } catch (error) {
        console.log(`   ‚ùå Error verificando MinIO: ${error.message}`);
      }
    }

    // 6. Verificar estad√≠sticas del orquestador
    console.log('\n6Ô∏è‚É£ Verificando estad√≠sticas del sistema...');
    
    try {
      const stats = await orchestrator.getStats();
      console.log('   üìä Estad√≠sticas:');
      console.log(`   - Browser-MCP: ${stats.browserMCP.status}`);
      console.log(`   - Scraperr: ${stats.scraperr.totalScrapes || 0} scrapes`);
      console.log(`   - MinIO: ${stats.minio.available ? 'Disponible' : 'No disponible'}`);
    } catch (error) {
      console.log(`   ‚ùå Error obteniendo estad√≠sticas: ${error.message}`);
    }

    // 7. Resumen final
    console.log('\nüìä RESUMEN DE LA PRUEBA:');
    console.log(`   ‚úÖ Orquestador: Funcionando`);
    console.log(`   ${minioStatus.available ? '‚úÖ' : '‚ö†Ô∏è'} MinIO: ${minioStatus.available ? 'Disponible' : 'No disponible'}`);
    console.log(`   ${results.length > 0 ? '‚úÖ' : '‚ùå'} Scraping: ${results.length} ofertas extra√≠das`);
    console.log(`   ‚è±Ô∏è  Tiempo: ${duration}s`);
    
    if (results.length > 0) {
      console.log('\nüéâ PRUEBA EXITOSA - LOS 3 M√ìDULOS EST√ÅN FUNCIONANDO');
    } else {
      console.log('\n‚ö†Ô∏è  PRUEBA PARCIAL - VERIFICAR M√ìDULOS EXTERNOS');
    }

  } catch (error) {
    console.error('\n‚ùå ERROR EN LA PRUEBA:', error.message);
    console.error('Stack:', error.stack);
    
    // Informaci√≥n adicional para debugging
    console.log('\nüîß INFORMACI√ìN DE DEBUG:');
    console.log('- Verificar que los m√≥dulos externos est√©n disponibles');
    console.log('- Verificar conexi√≥n a internet para scraping');
    console.log('- Verificar que MinIO est√© corriendo si es necesario');
  }
}

// Ejecutar la prueba
testOrchestratorDirect().catch(console.error);
